pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/ibrarjee/bluegreen_deployment_eks.git']]])
            }
        }



        stage('Deploy Blue or Green') {
            steps {
                script {
                    if (namespaceExists("green")) {
                        deployToNamespace("blue")
                    } else {
                        deployToNamespace("green")
                    }
                }
            }
        }
    }
}

def namespaceExists(namespace) {
    return sh(script: "kubectl get namespaces -o json | jq '.items[].metadata.name' | grep -q ${namespace}", returnStatus: true) == 0
}

def deployToNamespace(namespace) {
    echo "Deploying to ${namespace} namespace..."
    withKubeConfig([credentialsId: 'k8s', serverUrl: 'https://43A1B4A8DA84FDE6E80B1B6D93764235.gr7.us-west-2.eks.amazonaws.com']) {
        sh """#!/bin/bash
            echo ${namespace}
            kubectl create namespace ${namespace}
            
            names=${namespace}

            if [[ \$names == "green" ]]
            then
               imagev="kmgoddard/bgapp:1.5"
            else
              imagev="kmgoddard/bgapp:1.4"
            fi
            echo "after execution"
            echo "\$imagev"

            sed -i "s@Image@\$imagev@g" blue_green_deployment/values.yaml
            sed -i "s@Namespace@\$names@g" blue_green_deployment/values.yaml
            cat  blue_green_deployment/values.yaml

            helm install bluedeployment blue_green_deployment -n ${namespace}
            sleep 30s
            

            
            echo "after execution"
            
        """
    }

    withAWS(credentials: 'aws', region: 'us-west-2') {
        sh """
            chmod +x before_${namespace}_updatedns.sh
            ./before_${namespace}_updatedns.sh
            sleep 100
            chmod +x after_${namespace}_updatedns.sh
            ./after_${namespace}_updatedns.sh
        """
    }
    

    
    def oppositeNamespace = (namespace == "blue") ? "green" : "blue"
    if (namespaceExists(oppositeNamespace)) {
        echo "Decommissioning old deployment in ${oppositeNamespace} namespace..."
        withKubeConfig([credentialsId: 'k8s', serverUrl: 'https://43A1B4A8DA84FDE6E80B1B6D93764235.gr7.us-west-2.eks.amazonaws.com']) {

            sh "helm uninstall bluedeployment -n  ${oppositeNamespace} "
            sh "kubectl delete namespace ${oppositeNamespace}"
        }
    } else {
        echo "Old deployment in ${oppositeNamespace} namespace not found, skipping decommissioning..."
    }
}
